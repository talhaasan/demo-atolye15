version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:14.17
    working_directory: ~/repo

jobs:
  test_all:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Clear Yarn cache
          command: yarn cache clean

      - run:
          name: Remove node_modules
          command: rm -rf node_modules

      - run:
          name: Install dependencies
          command: yarn

      # - run:
      #     name: Run Lint
      #     command: yarn lint --verbose

      - run:
          name: Run Tests
          command: |
            yarn format:check && \
            yarn test && \
            yarn test:cov && \
            yarn test:e2e


  docker_build_k8s_deploy:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - setup_remote_docker

      # Docker cache temizleme
      - run:
          name: Clear Docker cache
          command: docker builder prune -af

      - run:
          name: Authenticate to Google Cloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker
            gcloud container clusters get-credentials atolye15 --zone europe-west3-a --project $GCLOUD_PROJECT

      #TODO: image tag'i commit id kullanılarak hata oluşması durumunda debug ve rollback işlemleri kolaylaştırılabilr.
      - run:
          name: Build and Push Docker Image
          command: |
            docker build -t gcr.io/$GCLOUD_PROJECT/hello-world:latest .
            docker push gcr.io/$GCLOUD_PROJECT/hello-world:latest
          
      - run:
          name: Deploy to Kubernetes
          command: |
            kubectl apply -f k8s/stage/deployment.yaml
            kubectl apply -f k8s/stage/service.yaml
            kubectl rollout restart deployment hello-world-deployment -n stage

  send_email:
    docker:
      - image: curlimages/curl:latest
    steps:
      - run:
          name: Send Email Notification via SendGrid
          command: |
            curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header 'Authorization: Bearer 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' \
            --header 'Content-Type: application/json' \
            --data '{
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "ibrahimtalhaasan@gmail.com"
                    }
                  ],
                  "subject": "Deployment Notification"
                }
              ],
              "from": {
                "email": "talha.asan@outlook.com"
              },
              "content": [
                {
                  "type": "text/plain",
                  "value": "Deployment completed successfully!"
                }
              ]
            }'

  check_source_branch:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run:
          name: Check if PR is to Develop
          command: |
            if [[ -z "$CIRCLE_PULL_REQUEST" ]]; then
              echo "This is not a PR. Skipping check."
              exit 0
            elif [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              echo "This is a PR to develop. Proceeding with deployment steps."
              exit 0
            else
              echo "Not a PR to develop. Skipping deployment steps."
              exit 1
            fi

workflows:
  version: 2
  feature_branch_test:
    jobs:
      - test_all:
          filters:
            branches:
              ignore:
                - master
                - develop  # Sadece feature branch'lere commit geldiğinde çalışacak

  deploy_on_pr_to_develop:
    jobs:
      - check_source_branch:
          filters:
            branches:
              only:
                - develop  # Sadece develop branch'ine PR geldiğinde çalışır
      - docker_build_k8s_deploy:
          requires:
            - check_source_branch
          filters:
            branches:
              only:
                - develop  # Sadece PR develop branch'ine açıldığında tetiklenir
      - send_email:
          requires:
            - docker_build_k8s_deploy
          filters:
            branches:
              only:
                - develop  # Sadece PR develop branch'ine açıldığında email gönderilir