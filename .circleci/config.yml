version: 2.1

executors:
  node-executor:
    docker:
      - image: circleci/node:14
    working_directory: ~/repo

jobs:
  test_all:
    executor: node-executor
    steps:
      - checkout

      # Yarn cache temizleme
      - run:
          name: Clear Yarn cache
          command: yarn cache clean

      # Yarn ile bağımlılıkları yükle
      - run: yarn
    
      # Lint, format, test işlemlerini çalıştır
      - run: |
          yarn lint && \
          yarn format:check && \
          yarn test && \
          yarn test:cov && \
          yarn test:e2e

  docker_build:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - setup_remote_docker

      # Docker cache temizleme
      - run:
          name: Clear Docker cache
          command: docker builder prune -af

      - run:
          name: Authenticate to Google Cloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker
      
      - run:
          name: Build and Push Docker Image
          command: |
            docker build -t gcr.io/$GCLOUD_PROJECT/hello-world:latest .
            docker push gcr.io/$GCLOUD_PROJECT/hello-world:latest
          
      # Install kubectl
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      # Kubernetes kubeconfig ayarlama
      - run:
          name: Configure kubectl
          command: |
            echo "${KUBECONFIG_CONTENT}" > ${HOME}/.kube/config
            chmod 600 ${HOME}/.kube/config  # Dosya izinlerini ayarlayın

      - run:
          name: Check Kubernetes Cluster Access
          command: |
            kubectl get nodes


      - run:
          name: Deploy to Kubernetes
          command: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml

  send_email:
    docker:
      - image: curlimages/curl:latest
    steps:
      - run:
          name: Send Email Notification via SendGrid
          command: |
            curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header 'Authorization: Bearer $SENDGRID_API_KEY' \
            --header 'Content-Type: application/json' \
            --data '{
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "talha.asan@outlook.com"
                    }
                  ],
                  "subject": "Deployment Notification"
                }
              ],
              "from": {
                "email": "talha.asan@outlook.com"
              },
              "content": [
                {
                  "type": "text/plain",
                  "value": "Deployment completed successfully!"
                }
              ]
            }'

workflows:
  version: 2
  deploy_on_pull_request:
    jobs:
      - docker_build:
          filters:
            branches:
              ignore:
                - develop
                - main
      - send_email:
          requires:
            - docker_build

  test_on_commit_or_merge:
    jobs:
      - test_all:
          filters:
            branches:
              only:
                - develop
